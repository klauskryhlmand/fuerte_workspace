/* Auto-generated by genmsg_cpp for file /home/daniel/fuerte_workspace/sandbox/FroboMsgs/msg/pwm_o.msg */
#ifndef FROBOMSGS_MESSAGE_PWM_O_H
#define FROBOMSGS_MESSAGE_PWM_O_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace FroboMsgs
{
template <class ContainerAllocator>
struct pwm_o_ {
  typedef pwm_o_<ContainerAllocator> Type;

  pwm_o_()
  : speed_left(0)
  , speed_right(0)
  , direction_left(0)
  , direction_right(0)
  , enable_left(0)
  , enable_right(0)
  , direction(0)
  {
  }

  pwm_o_(const ContainerAllocator& _alloc)
  : speed_left(0)
  , speed_right(0)
  , direction_left(0)
  , direction_right(0)
  , enable_left(0)
  , enable_right(0)
  , direction(0)
  {
  }

  typedef uint32_t _speed_left_type;
  uint32_t speed_left;

  typedef uint32_t _speed_right_type;
  uint32_t speed_right;

  typedef uint32_t _direction_left_type;
  uint32_t direction_left;

  typedef uint32_t _direction_right_type;
  uint32_t direction_right;

  typedef uint32_t _enable_left_type;
  uint32_t enable_left;

  typedef uint32_t _enable_right_type;
  uint32_t enable_right;

  typedef uint32_t _direction_type;
  uint32_t direction;


  typedef boost::shared_ptr< ::FroboMsgs::pwm_o_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::FroboMsgs::pwm_o_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pwm_o
typedef  ::FroboMsgs::pwm_o_<std::allocator<void> > pwm_o;

typedef boost::shared_ptr< ::FroboMsgs::pwm_o> pwm_oPtr;
typedef boost::shared_ptr< ::FroboMsgs::pwm_o const> pwm_oConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::FroboMsgs::pwm_o_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::FroboMsgs::pwm_o_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace FroboMsgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::FroboMsgs::pwm_o_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::FroboMsgs::pwm_o_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::FroboMsgs::pwm_o_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1522611c8025ddba76f26a25869646d3";
  }

  static const char* value(const  ::FroboMsgs::pwm_o_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1522611c8025ddbaULL;
  static const uint64_t static_value2 = 0x76f26a25869646d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::FroboMsgs::pwm_o_<ContainerAllocator> > {
  static const char* value() 
  {
    return "FroboMsgs/pwm_o";
  }

  static const char* value(const  ::FroboMsgs::pwm_o_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::FroboMsgs::pwm_o_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 speed_left\n\
uint32 speed_right\n\
uint32 direction_left\n\
uint32 direction_right\n\
uint32 enable_left\n\
uint32 enable_right\n\
uint32 direction\n\
\n\
";
  }

  static const char* value(const  ::FroboMsgs::pwm_o_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::FroboMsgs::pwm_o_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::FroboMsgs::pwm_o_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.speed_left);
    stream.next(m.speed_right);
    stream.next(m.direction_left);
    stream.next(m.direction_right);
    stream.next(m.enable_left);
    stream.next(m.enable_right);
    stream.next(m.direction);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pwm_o_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::FroboMsgs::pwm_o_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::FroboMsgs::pwm_o_<ContainerAllocator> & v) 
  {
    s << indent << "speed_left: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.speed_left);
    s << indent << "speed_right: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.speed_right);
    s << indent << "direction_left: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.direction_left);
    s << indent << "direction_right: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.direction_right);
    s << indent << "enable_left: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.enable_left);
    s << indent << "enable_right: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.enable_right);
    s << indent << "direction: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.direction);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FROBOMSGS_MESSAGE_PWM_O_H

