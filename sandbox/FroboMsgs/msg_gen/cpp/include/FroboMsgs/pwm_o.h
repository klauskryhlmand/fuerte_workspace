/* Auto-generated by genmsg_cpp for file /home/frobo/fuerte_workspace/sandbox/FroboMsgs/msg/pwm_o.msg */
#ifndef FROBOMSGS_MESSAGE_PWM_O_H
#define FROBOMSGS_MESSAGE_PWM_O_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace FroboMsgs
{
template <class ContainerAllocator>
struct pwm_o_ {
  typedef pwm_o_<ContainerAllocator> Type;

  pwm_o_()
  : pwm_speed(0)
  {
  }

  pwm_o_(const ContainerAllocator& _alloc)
  : pwm_speed(0)
  {
  }

  typedef uint32_t _pwm_speed_type;
  uint32_t pwm_speed;


  typedef boost::shared_ptr< ::FroboMsgs::pwm_o_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::FroboMsgs::pwm_o_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct pwm_o
typedef  ::FroboMsgs::pwm_o_<std::allocator<void> > pwm_o;

typedef boost::shared_ptr< ::FroboMsgs::pwm_o> pwm_oPtr;
typedef boost::shared_ptr< ::FroboMsgs::pwm_o const> pwm_oConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::FroboMsgs::pwm_o_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::FroboMsgs::pwm_o_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace FroboMsgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::FroboMsgs::pwm_o_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::FroboMsgs::pwm_o_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::FroboMsgs::pwm_o_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a7a55754d53c25a62a32c681d73ec18f";
  }

  static const char* value(const  ::FroboMsgs::pwm_o_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa7a55754d53c25a6ULL;
  static const uint64_t static_value2 = 0x2a32c681d73ec18fULL;
};

template<class ContainerAllocator>
struct DataType< ::FroboMsgs::pwm_o_<ContainerAllocator> > {
  static const char* value() 
  {
    return "FroboMsgs/pwm_o";
  }

  static const char* value(const  ::FroboMsgs::pwm_o_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::FroboMsgs::pwm_o_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 pwm_speed\n\
\n\
";
  }

  static const char* value(const  ::FroboMsgs::pwm_o_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::FroboMsgs::pwm_o_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::FroboMsgs::pwm_o_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pwm_speed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct pwm_o_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::FroboMsgs::pwm_o_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::FroboMsgs::pwm_o_<ContainerAllocator> & v) 
  {
    s << indent << "pwm_speed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pwm_speed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // FROBOMSGS_MESSAGE_PWM_O_H

