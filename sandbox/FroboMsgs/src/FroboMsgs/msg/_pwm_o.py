"""autogenerated by genpy from FroboMsgs/pwm_o.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pwm_o(genpy.Message):
  _md5sum = "46d00fbd421c930ccd6d0a3aefbae682"
  _type = "FroboMsgs/pwm_o"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 speed_left
float64 speed_right
uint32 direction_left
uint32 direction_right
uint32 enable_left
uint32 enable_right
uint32 direction

"""
  __slots__ = ['speed_left','speed_right','direction_left','direction_right','enable_left','enable_right','direction']
  _slot_types = ['float64','float64','uint32','uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed_left,speed_right,direction_left,direction_right,enable_left,enable_right,direction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pwm_o, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.speed_left is None:
        self.speed_left = 0.
      if self.speed_right is None:
        self.speed_right = 0.
      if self.direction_left is None:
        self.direction_left = 0
      if self.direction_right is None:
        self.direction_right = 0
      if self.enable_left is None:
        self.enable_left = 0
      if self.enable_right is None:
        self.enable_right = 0
      if self.direction is None:
        self.direction = 0
    else:
      self.speed_left = 0.
      self.speed_right = 0.
      self.direction_left = 0
      self.direction_right = 0
      self.enable_left = 0
      self.enable_right = 0
      self.direction = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2d5I.pack(_x.speed_left, _x.speed_right, _x.direction_left, _x.direction_right, _x.enable_left, _x.enable_right, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.speed_left, _x.speed_right, _x.direction_left, _x.direction_right, _x.enable_left, _x.enable_right, _x.direction,) = _struct_2d5I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2d5I.pack(_x.speed_left, _x.speed_right, _x.direction_left, _x.direction_right, _x.enable_left, _x.enable_right, _x.direction))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.speed_left, _x.speed_right, _x.direction_left, _x.direction_right, _x.enable_left, _x.enable_right, _x.direction,) = _struct_2d5I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2d5I = struct.Struct("<2d5I")
